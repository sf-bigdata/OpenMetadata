# generated by datamodel-codegen:
#   filename:  events/api/createEventSubscription.json
#   timestamp: 2023-12-13T07:28:36+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Extra, Field

from ...type import basic, entityReference
from .. import eventSubscription


class CreateEventSubscription(BaseModel):
    class Config:
        extra = Extra.forbid

    name: basic.EntityName = Field(
        ..., description='Name that uniquely identifies this Alert.'
    )
    displayName: Optional[str] = Field(None, description='Display name for this Alert.')
    description: Optional[basic.Markdown] = Field(
        None,
        description='A short description of the Alert, comprehensible to regular users.',
    )
    owner: Optional[entityReference.EntityReference] = Field(
        None, description='Owner of this Alert.'
    )
    enabled: Optional[bool] = Field(True, description='Is the alert enabled.')
    batchSize: Optional[int] = Field(
        10, description='Maximum number of events sent in a batch (Default 10).'
    )
    timeout: Optional[int] = Field(
        10, description='Connection timeout in seconds. (Default 10s).'
    )
    readTimeout: Optional[int] = Field(
        12, description='Read timeout in seconds. (Default 12s).'
    )
    alertType: eventSubscription.AlertType = Field(..., description='Type of Alert')
    trigger: Optional[eventSubscription.Trigger] = None
    filteringRules: Optional[eventSubscription.FilteringRules] = Field(
        None,
        description='Set of rules that the Alert Contains to allow conditional control for alerting.',
    )
    subscriptionType: eventSubscription.SubscriptionType
    subscriptionConfig: Optional[eventSubscription.SubscriptionConfig] = None
    provider: Optional[basic.ProviderType] = basic.ProviderType.user
