# generated by datamodel-codegen:
#   filename:  metadataIngestion/mlmodelServiceMetadataPipeline.json
#   timestamp: 2023-12-13T07:28:36+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Extra, Field

from ..type import filterPattern


class MlModelMetadataConfigType(Enum):
    MlModelMetadata = 'MlModelMetadata'


class MlModelServiceMetadataPipeline(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[MlModelMetadataConfigType] = Field(
        MlModelMetadataConfigType.MlModelMetadata, description='Pipeline type'
    )
    mlModelFilterPattern: Optional[filterPattern.FilterPattern] = Field(
        None,
        description='Regex to only fetch MlModels with names matching the pattern.',
    )
    markDeletedMlModels: Optional[bool] = Field(
        True,
        description='Optional configuration to soft delete MlModels in OpenMetadata if the source MlModels are deleted. Also, if the MlModel is deleted, all the associated entities like lineage, etc., with that MlModels will be deleted',
    )
