# generated by datamodel-codegen:
#   filename:  entity/automations/testServiceConnection.json
#   timestamp: 2023-12-13T07:28:36+00:00

from __future__ import annotations

from typing import Optional, Union

from pydantic import BaseModel, Extra, Field

from ...security.secrets import secretsManagerProvider
from ...type import basic
from ..services import (
    dashboardService,
    databaseService,
    messagingService,
    metadataService,
    mlmodelService,
    pipelineService,
    serviceType,
    storageService,
)


class TestServiceConnectionRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    connection: Optional[
        Union[
            databaseService.DatabaseConnection,
            dashboardService.DashboardConnection,
            messagingService.MessagingConnection,
            pipelineService.PipelineConnection,
            mlmodelService.MlModelConnection,
            metadataService.MetadataConnection,
            storageService.StorageConnection,
        ]
    ] = Field(None, description='Connection object.')
    serviceType: Optional[serviceType.ServiceType] = Field(
        None, description='Type of service such as Database, Dashboard, Messaging, etc.'
    )
    connectionType: Optional[str] = Field(
        None,
        description='Type of the connection to test such as Snowflake, MySQL, Looker, etc.',
    )
    serviceName: Optional[basic.EntityName] = Field(
        None, description='Optional value that identifies this service name.'
    )
    secretsManagerProvider: Optional[
        secretsManagerProvider.SecretsManagerProvider
    ] = secretsManagerProvider.SecretsManagerProvider.noop
