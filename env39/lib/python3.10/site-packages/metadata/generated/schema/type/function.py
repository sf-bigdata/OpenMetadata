# generated by datamodel-codegen:
#   filename:  type/function.json
#   timestamp: 2023-12-13T07:28:36+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Extra, Field


class ParameterType(Enum):
    NotRequired = 'NotRequired'
    AllIndexElasticSearch = 'AllIndexElasticSearch'
    SpecificIndexElasticSearch = 'SpecificIndexElasticSearch'
    ReadFromParamContext = 'ReadFromParamContext'


class ParamAdditionalContext(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Optional[List[str]] = Field(
        None, description='List of Entities', unique_items=True
    )


class Function(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = Field(None, description='Name of the function.')
    input: Optional[str] = Field(
        None, description='Description of input taken by the function.'
    )
    description: Optional[str] = Field(None, description='Description fo the function.')
    examples: Optional[List] = Field(
        None, description='Examples of the function to help users author conditions.'
    )
    parameterInputType: Optional[ParameterType] = Field(
        None, description='List of receivers to send mail to'
    )
    paramAdditionalContext: Optional[ParamAdditionalContext] = None
